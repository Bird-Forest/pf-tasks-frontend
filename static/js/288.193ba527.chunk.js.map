{"version":3,"file":"static/js/288.193ba527.chunk.js","mappings":"2RAUaA,GAPWC,EAAAA,GAAAA,IAAH,2FAOQA,EAAAA,GAAAA,IAAH,uUAiBbC,EAAeD,EAAAA,GAAAA,IAAH,mQAaZE,EAAgBF,EAAAA,GAAAA,GAAH,gIAObG,EAAeH,EAAAA,GAAAA,IAAH,0fAkBGI,E,qIC/DfC,EAAWL,EAAAA,GAAAA,IAAH,8JAURM,EAAaN,EAAAA,GAAAA,IAAH,ksC,iDCJR,SAASO,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IAE1B,SAASC,EAASH,EAAOI,GAEvB,OADYJ,EAAMI,QAAO,SAAAC,GAAI,OAAIA,EAAKC,QAAUF,CAAnB,IAChBG,MACd,CAED,IAAMC,EAAMR,EAAMO,OACZE,EAAQN,EAASH,EAAOU,EAAAA,EAAAA,OACxBC,EAAOR,EAASH,EAAOU,EAAAA,EAAAA,MACvBE,EAAMT,EAASH,EAAOU,EAAAA,EAAAA,KACtBG,EAASV,EAASH,EAAOU,EAAAA,EAAAA,QACzBI,EAAQX,EAASH,EAAOU,EAAAA,EAAAA,OAExBK,EAAiB,SAAAC,GACrB,IAAMC,EAAWD,EAAIE,OAAOC,KACX,QAAbF,GACFnB,GAASsB,EAAAA,EAAAA,GAAeH,GAE3B,EAED,OACE,SAACtB,EAAD,WACE,SAACC,EAAD,WACE,iBAAKyB,UAAU,OAAf,WACE,SAAC,KAAD,CAAMC,GAAG,GAAGC,MAAO,CAAEC,eAAgB,QAArC,UACE,mBACEL,KAAK,MACLE,UAAU,iBACVI,QAASV,EAHX,SAKGP,OAGL,SAAC,KAAD,CAAMc,GAAG,QAAQC,MAAO,CAAEC,eAAgB,QAA1C,UACE,mBACEL,KAAMT,EAAAA,EAAAA,MACNW,UAAU,kBACVI,QAASV,EAHX,SAKGN,OAGL,SAAC,KAAD,CAAMa,GAAG,QAAQC,MAAO,CAAEC,eAAgB,QAA1C,UACE,mBAEEL,KAAMT,EAAAA,EAAAA,KACNW,UAAU,iBACVI,QAASV,EAJX,SAMGJ,OAGL,SAAC,KAAD,CAAMW,GAAG,QAAQC,MAAO,CAAEC,eAAgB,QAA1C,UACE,mBAEEL,KAAMT,EAAAA,EAAAA,IACNW,UAAU,gBACVI,QAASV,EAJX,SAMGH,OAGL,SAAC,KAAD,CAAMU,GAAG,QAAQC,MAAO,CAAEC,eAAgB,QAA1C,UACE,mBAEEL,KAAMT,EAAAA,EAAAA,OACNW,UAAU,mBACVI,QAASV,EAJX,SAMGF,OAGL,SAAC,KAAD,CAAMS,GAAG,QAAQC,MAAO,CAAEC,eAAgB,QAA1C,UACE,mBAEEL,KAAMT,EAAAA,EAAAA,MACNW,UAAU,kBACVI,QAASV,EAJX,SAMGD,YAOd,C,kCCxFc,SAASY,IACtB,IAAM5B,GAAWC,EAAAA,EAAAA,MAKjB,OAJA4B,EAAAA,EAAAA,YAAU,WACR7B,GAAS8B,EAAAA,EAAAA,MACV,GAAE,CAAC9B,KAGF,+BACE,SAAC,KAAD,WACE,UAAC,KAAD,YACE,SAACD,EAAD,KACA,SAAC,EAAAgC,SAAD,CAAUC,UAAU,SAAC,IAAD,IAApB,UACE,SAAC,KAAD,YAMX,C,uDC3BM,IAAMpB,EAAUqB,OAAOC,OAAO,CACnCvB,MAAO,UACPE,KAAM,UACNC,IAAK,UACLC,OAAQ,UACRC,MAAO,W","sources":["pages/Page.styled.js","components/Filter/Filter.styled.js","components/Filter/FilterTasks.jsx","pages/TasksPage.jsx","redux/filter/constans.js"],"sourcesContent":["import styled from 'styled-components';\nimport picture from '../img/icon_219488.png';\n\nexport const WrapHome = styled.div`\n  top: 100px;\n  display: flex;\n  width: 900px;\n  height: 100%;\n`;\n\nexport const WrapTasksPage = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 4px;\n  width: 90%;\n  background-color: #e0e0e0;\n  /* height: 100%; */\n  margin: 0;\n  padding: 8px;\n  border-radius: 8px;\n  @media screen and (min-width: 767px) {\n    width: 760px;\n  }\n`;\n\nexport const WrapSignPage = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 12px;\n  width: 100%;\n  margin: 0;\n  padding: 16px 0 0 0;\n  @media screen and (min-width: 767px) {\n    width: 760px;\n  }\n`;\nexport const TitleSignPage = styled.h3`\n  font-size: 24px;\n  font-weight: 700;\n  line-height: 1.5;\n  text-align: center;\n  color: #424242;\n`;\nexport const WrapNotFound = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n  margin: 20px 0 0 0;\n  padding: 0;\n  .title {\n    font-size: clamp(1rem, 0.818rem + 0.91vw, 1.5rem);\n    font-weight: 700;\n    color: #616161;\n    margin: 0;\n    padding: 0;\n  }\n  .img {\n    width: 160px;\n    height: 160px;\n    background-image: url(${picture});\n    background-repeat: no-repeat;\n    background-size: cover;\n    margin: 0;\n    padding: 0;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const TitleTab = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 2px;\n  width: 100%;\n\n  padding: 0;\n  margin: 0;\n`;\nexport const CellStatus = styled.div`\n  display: flex;\n  flex-grow: 1;\n  justify-content: center;\n  align-items: center;\n  height: 36px;\n  background-color: #9e9e9e;\n  border-radius: 8px;\n  border: 3px solid RGBA(117, 117, 117, 0.6);\n  padding: 0 2px;\n  margin: 0;\n  .wrap {\n    display: flex;\n    flex-grow: 1;\n    justify-content: space-around;\n    align-items: center;\n    height: 32px;\n    border-radius: 4px;\n    background-color: #f5f5f5;\n    outline: none;\n    border: none;\n    padding: 0;\n  }\n  .btn-prior {\n    display: block;\n    font-size: 16px;\n    font-weight: 500;\n    color: #424242;\n    width: 28px;\n    height: 28px;\n    border-radius: 50%;\n    cursor: pointer;\n    padding: 0;\n    margin: 0;\n  }\n  .grey {\n    background-color: #e0e0e0;\n    border: 1px solid #e0e0e0;\n  }\n  .white {\n    background-color: #ffffff;\n    border: 1px solid #ffffff;\n  }\n  .blue {\n    background-color: #64b5f6;\n    border: 1px solid #64b5f6;\n  }\n  .red {\n    background-color: #ff5252;\n    border: 1px solid #ff5252;\n  }\n  .yellow {\n    background-color: #ffee58;\n    border: 1px solid #ffee58;\n  }\n  .green {\n    background-color: #00e676;\n    border: 1px solid #00e676;\n  }\n`;\n","import React from 'react';\nimport { CellStatus, TitleTab } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { setColorFilter } from 'redux/filter/filtersSlice';\nimport { selectTasks } from 'redux/selectors';\nimport { filters } from '../../redux/filter/constans';\n\nexport default function FilterTasks() {\n  const dispatch = useDispatch();\n  const tasks = useSelector(selectTasks);\n\n  function getCount(tasks, filter) {\n    let count = tasks.filter(task => task.color === filter);\n    return count.length;\n  }\n\n  const all = tasks.length;\n  const white = getCount(tasks, filters.white);\n  const blue = getCount(tasks, filters.blue);\n  const red = getCount(tasks, filters.red);\n  const yellow = getCount(tasks, filters.yellow);\n  const green = getCount(tasks, filters.green);\n\n  const handleGetColor = evt => {\n    const newColor = evt.target.name;\n    if (newColor !== 'all') {\n      dispatch(setColorFilter(newColor));\n    }\n  };\n\n  return (\n    <TitleTab>\n      <CellStatus>\n        <div className=\"wrap\">\n          <Link to=\"\" style={{ textDecoration: 'none' }}>\n            <button\n              name=\"all\"\n              className=\"btn-prior grey\"\n              onClick={handleGetColor}\n            >\n              {all}\n            </button>\n          </Link>\n          <Link to=\"color\" style={{ textDecoration: 'none' }}>\n            <button\n              name={filters.white}\n              className=\"btn-prior white\"\n              onClick={handleGetColor}\n            >\n              {white}\n            </button>\n          </Link>\n          <Link to=\"color\" style={{ textDecoration: 'none' }}>\n            <button\n              // name=\"#64b5f6\"\n              name={filters.blue}\n              className=\"btn-prior blue\"\n              onClick={handleGetColor}\n            >\n              {blue}\n            </button>\n          </Link>\n          <Link to=\"color\" style={{ textDecoration: 'none' }}>\n            <button\n              // name=\"#ff5252\"\n              name={filters.red}\n              className=\"btn-prior red\"\n              onClick={handleGetColor}\n            >\n              {red}\n            </button>\n          </Link>\n          <Link to=\"color\" style={{ textDecoration: 'none' }}>\n            <button\n              // name=\"#ffee58\"\n              name={filters.yellow}\n              className=\"btn-prior yellow\"\n              onClick={handleGetColor}\n            >\n              {yellow}\n            </button>\n          </Link>\n          <Link to=\"color\" style={{ textDecoration: 'none' }}>\n            <button\n              // name=\"#00e676\"\n              name={filters.green}\n              className=\"btn-prior green\"\n              onClick={handleGetColor}\n            >\n              {green}\n            </button>\n          </Link>\n        </div>\n      </CellStatus>\n    </TitleTab>\n  );\n}\n\n//  <BtnAll\n//           selected={filter === statusFilters.all}\n//           onClick={() => handleFilterChange(statusFilters.all)}\n//         >\n//           {tasks.length}\n//         </BtnAll>\n//         <BtnRed\n//           selected={filter === statusFilters.red}\n//           onClick={() => handleFilterChange(statusFilters.red)}\n//         >\n//           {count.red}\n//         </BtnRed>\n//         <BtnYellow\n//           selected={filter === statusFilters.yellow}\n//           onClick={() => handleFilterChange(statusFilters.yellow)}\n//         >\n//           {count.yellow}\n//         </BtnYellow>\n//         <BtnGreen\n//           selected={filter === statusFilters.green}\n//           onClick={() => handleFilterChange(statusFilters.green)}\n//         >\n//           {count.green}\n//         </BtnGreen>\n","import { Suspense, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchTasks } from 'redux/tasks/servise';\nimport { WrapTasksPage } from './Page.styled';\nimport FilterTasks from 'components/Filter/FilterTasks';\nimport { WrapOutlet } from 'components/App.styled';\nimport Loading from 'components/Loader/Loader';\nimport { Outlet } from 'react-router-dom';\n\nexport default function TasksPage() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n\n  return (\n    <>\n      <WrapOutlet>\n        <WrapTasksPage>\n          <FilterTasks />\n          <Suspense fallback={<Loading />}>\n            <Outlet />\n          </Suspense>\n        </WrapTasksPage>\n      </WrapOutlet>\n    </>\n  );\n}\n","export const filters = Object.freeze({\n  white: '#ffffff',\n  blue: '#64b5f6',\n  red: '#ff5252',\n  yellow: '#ffee58',\n  green: '#00e676',\n});\n"],"names":["WrapTasksPage","styled","WrapSignPage","TitleSignPage","WrapNotFound","picture","TitleTab","CellStatus","FilterTasks","dispatch","useDispatch","tasks","useSelector","selectTasks","getCount","filter","task","color","length","all","white","filters","blue","red","yellow","green","handleGetColor","evt","newColor","target","name","setColorFilter","className","to","style","textDecoration","onClick","TasksPage","useEffect","fetchTasks","Suspense","fallback","Object","freeze"],"sourceRoot":""}