{"version":3,"file":"static/js/997.347970f8.chunk.js","mappings":"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","sources":["components/Task/MyTask.jsx","components/Task/Task.styled.js","components/Task/TaskList.jsx","components/Task/TaskListEmpty.jsx","redux/filter/constans.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  BtnDelete,\n  BtnSetting,\n  BtnStatus,\n  SettingTask,\n  TaskBackGr,\n  Text,\n  WrapTask,\n  Wrapper,\n} from './Task.styled';\nimport { BsFillTrash3Fill } from 'react-icons/bs';\nimport { useDispatch } from 'react-redux';\nimport { BsEmojiWink } from 'react-icons/bs';\nimport { FaCogs } from 'react-icons/fa';\nimport { BsHandThumbsUp } from 'react-icons/bs';\nimport { changeTaskColor, deleteTask } from 'redux/tasks/servise';\nimport { filters } from '../../redux/filter/constans';\n\nexport default function MyTask({ task }) {\n  const dispatch = useDispatch();\n  const [isMoving, setIsMoving] = useState(false);\n\n  const handleSettingClick = () => {\n    setIsMoving(!isMoving);\n  };\n\n  const handleDeleteTask = evt => {\n    const taskId = evt.currentTarget.name;\n    dispatch(deleteTask(taskId));\n  };\n\n  const handleChangeColor = evt => {\n    const newTask = {\n      taskId: evt.currentTarget.name,\n      newColor: evt.currentTarget.value,\n    };\n    dispatch(changeTaskColor(newTask));\n  };\n\n  return (\n    <WrapTask id={task._id}>\n      <Wrapper>\n        <TaskBackGr style={{ backgroundColor: task.color }}>\n          <Text>{task.title}</Text>\n          <SettingTask\n            style={{\n              transform: isMoving ? 'translate(0, 0)' : 'translate(-124%, 0)',\n            }}\n          >\n            <BtnStatus\n              type=\"button\"\n              name={task._id}\n              // color=\"#64b5f6\"\n              // value=\"#64b5f6\"\n              value={filters.blue}\n              onClick={handleChangeColor}\n            >\n              <BsHandThumbsUp className=\"icon-color\" />\n            </BtnStatus>\n            <BtnStatus\n              type=\"button\"\n              name={task._id}\n              // color=\"#ff5252\"\n              // value=\"#ff5252\"\n              value={filters.red}\n              onClick={handleChangeColor}\n            >\n              <BsEmojiWink className=\"icon-color\" />\n            </BtnStatus>\n            <BtnStatus\n              type=\"button\"\n              name={task._id}\n              // color=\"#ffee58\"\n              // value=\"#ffee58\"\n              value={filters.yellow}\n              onClick={handleChangeColor}\n            >\n              <BsEmojiWink className=\"icon-color\" />\n            </BtnStatus>\n            <BtnStatus\n              type=\"button\"\n              name={task._id}\n              // color=\"#00e676\"\n              // value=\"#00e676\"\n              value={filters.green}\n              onClick={handleChangeColor}\n            >\n              <BsEmojiWink className=\"icon-color\" />\n            </BtnStatus>\n            <BtnDelete name={task._id} onClick={handleDeleteTask}>\n              <BsFillTrash3Fill className=\"icon-delete\" />\n            </BtnDelete>\n          </SettingTask>\n          <BtnSetting onClick={handleSettingClick}>\n            <FaCogs className=\"icon-setting\" />\n          </BtnSetting>\n        </TaskBackGr>\n      </Wrapper>\n    </WrapTask>\n  );\n}\n","import styled from 'styled-components';\n\nexport const WrapList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 4px;\n  width: 100%;\n  padding: 0;\n`;\n\nexport const WrapTask = styled.li`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 2px;\n  width: 100%;\n`;\n\nexport const Wrapper = styled.div`\n  position: relative;\n  overflow: hidden;\n  display: flex;\n  flex-grow: 1;\n  justify-content: center;\n  align-items: center;\n  height: 36px;\n  background-color: #9e9e9e;\n  border-radius: 8px;\n  border: 3px solid RGBA(117, 117, 117, 0.6);\n  padding: 0 2px;\n  margin: 0;\n`;\nexport const TaskBackGr = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 32px;\n  width: 100%;\n  background-color: ${props => props.value};\n  border-radius: 6px;\n  border: 1px solid #bdbdbd;\n  padding: 0;\n  margin: 0;\n`;\nexport const Text = styled.p`\n  display: flex;\n  font-size: 16px;\n  font-weight: 400;\n  color: #424242;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin: 0;\n  padding: 0 0 0 36px;\n`;\nexport const BtnSetting = styled.button`\n  position: absolute;\n  /* overflow: hidden; */\n  display: flex;\n  width: 32px;\n  height: 32px;\n  justify-content: center;\n  align-items: center;\n  background-color: #bdbdbd;\n  border: 1px solid #bdbdbd;\n  outline: none;\n  padding: 0;\n  margin: 0;\n  border-top-left-radius: 4px;\n  border-bottom-left-radius: 4px;\n  cursor: pointer;\n  .icon-setting {\n    width: 24px;\n    height: 24px;\n    fill: #ffffff;\n  }\n  .icon-setting:hover,\n  .icon-setting:focus {\n    fill: #616161;\n  }\n`;\nexport const SettingTask = styled.div`\n  position: absolute;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 4px;\n  background-color: #bdbdbd;\n  flex-basis: 250px;\n  height: 32px;\n  border-bottom-right-radius: 4px;\n  border-top-right-radius: 4px;\n  padding: 0 4px;\n  margin: 0;\n  transform: translate(0, 0);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  left: 34px;\n`;\nexport const BtnStatus = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 30px;\n  height: 30px;\n  border: 1px solid #616161;\n  border-radius: 50%;\n  background-color: ${props => props.value};\n  cursor: pointer;\n  .icon-color {\n    width: 24px;\n    height: 24px;\n    fill: #616161;\n  }\n`;\nexport const BtnDelete = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #ffffff;\n  border-radius: 50%;\n  border: 1px solid #616161;\n  width: 30px;\n  height: 30px;\n  padding: 0;\n  cursor: pointer;\n  .icon-delete {\n    width: 20px;\n    height: 20px;\n    fill: #616161;\n  }\n`;\nexport const WrapEmpty = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  height: 100vh;\n  background-color: #e0e0e0;\n  padding: 0;\n  margin: 20px 0;\n  .empty-text {\n    font-size: 20px;\n    font-weight: 500;\n    color: #424242;\n  }\n  .icon-lizard {\n    width: 160px;\n    height: 160px;\n    fill: #424242;\n  }\n`;\n","import React, { useEffect } from 'react';\nimport { WrapList } from './Task.styled';\nimport {\n  selectErrorTasks,\n  selectIsLoading,\n  selectTasks,\n} from 'redux/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport MyTask from './MyTask';\nimport TaskListEmpty from './TaskListEmpty';\nimport { fetchTasks } from 'redux/tasks/servise';\nimport Loading from 'components/Loader/Loader';\n\nexport default function TaskList() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectErrorTasks);\n  const tasks = useSelector(selectTasks);\n  console.log(error);\n\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n\n  const showArr = Array.isArray(tasks) && tasks.length !== 0;\n  return (\n    <>\n      {isLoading && <Loading />}\n      {error && <h4>ERROR</h4>}\n      <WrapList>\n        {showArr ? (\n          tasks.map(task => <MyTask task={task} key={nanoid()} />)\n        ) : (\n          <TaskListEmpty />\n        )}\n      </WrapList>\n    </>\n  );\n}\n","import React from 'react';\nimport { WrapEmpty } from './Task.styled';\nimport { SiNotepadplusplus } from 'react-icons/si';\n\nexport default function TaskListEmpty() {\n  return (\n    <WrapEmpty>\n      <h4 className=\"empty-text\">It's empty here</h4>\n      <SiNotepadplusplus className=\"icon-lizard\" />\n    </WrapEmpty>\n  );\n}\n","export const filters = Object.freeze({\n  white: '#ffffff',\n  blue: '#64b5f6',\n  red: '#ff5252',\n  yellow: '#ffee58',\n  green: '#00e676',\n});\n"],"names":["MyTask","task","dispatch","useDispatch","useState","isMoving","setIsMoving","handleChangeColor","evt","newTask","taskId","currentTarget","name","newColor","value","changeTaskColor","id","_id","style","backgroundColor","color","title","transform","type","filters","onClick","className","deleteTask","WrapList","styled","WrapTask","Wrapper","TaskBackGr","props","Text","BtnSetting","SettingTask","BtnStatus","BtnDelete","WrapEmpty","TaskList","isLoading","useSelector","selectIsLoading","error","selectErrorTasks","tasks","selectTasks","console","log","useEffect","fetchTasks","showArr","Array","isArray","length","map","nanoid","TaskListEmpty","Object","freeze","white","blue","red","yellow","green"],"sourceRoot":""}