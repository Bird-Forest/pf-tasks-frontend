{"version":3,"file":"static/js/485.cf0ea7cd.chunk.js","mappings":"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","sources":["pages/Page.styled.js","components/TaskForm/TaskForm.styled.js","components/TaskForm/TaskForm.jsx","components/Task/Task.styled.js","components/Task/MyTask.jsx","components/Task/TaskList.jsx","pages/TasksPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const WrapTasksPage = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n  height: 100%;\n  margin: 64px auto;\n  padding: 0;\n  @media screen and (min-width: 380px) {\n    min-width: 360px;\n  }\n  @media screen and (min-width: 440px) {\n    min-width: 420px;\n  }\n  @media screen and (min-width: 500px) {\n    width: 480px;\n  }\n`;\nexport const WrapSignPage = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 20px;\n  width: 100%;\n  margin: 0;\n  padding: 28px 0 0 0;\n`;\nexport const TitleSignPage = styled.h3`\n  font-size: 24px;\n  font-weight: 700;\n  line-height: 1.5;\n  text-align: center;\n  color: #424242;\n`;\n// export const WrapLoginPage = styled.div`\n//   display: flex;\n//   flex-direction: column;\n//   justify-content: flex-start;\n//   align-items: center;\n//   gap: 20px;\n//   width: 100%;\n//   height: 100vh;\n//   margin: 0 auto;\n//   padding: 72px 0 0 0;\n// `;\n// export const TitleLoginPage = styled.h2`\n//   font-size: 24px;\n//   color: #1769aa;\n//   padding: 0;\n//   margin: 0;\n// `;\nexport const WrapHome = styled.div`\n  top: 100px;\n  display: flex;\n  width: 900px;\n  height: 100%;\n`;\n","import styled from 'styled-components';\n\nexport const FormTask = styled.form`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  min-width: 300px;\n  margin: 0 auto;\n  padding: 0;\n  @media screen and (min-width: 380px) {\n    min-width: 360px;\n  }\n  @media screen and (min-width: 440px) {\n    min-width: 420px;\n  }\n  @media screen and (min-width: 500px) {\n    width: 480px;\n  }\n`;\nexport const InputForm = styled.input`\n  display: flex;\n  background-color: #2196f3;\n  color: white;\n  width: 248px;\n  height: 44px;\n  font-size: 16px;\n  font-weight: 500;\n  border-bottom-left-radius: 25px;\n  border-top-left-radius: 25px;\n  border: 1px solid #2196f3;\n  outline: #2196f3;\n  padding: 0 0 0 16px;\n  margin: 0 auto;\n  @media screen and (min-width: 380px) {\n    width: 300px;\n  }\n  @media screen and (min-width: 440px) {\n    width: 360px;\n  }\n  @media screen and (min-width: 500px) {\n    width: 420px;\n  }\n`;\nexport const BtnForm = styled.button`\n  display: inline-block;\n  border-top-right-radius: 25px;\n  border-bottom-right-radius: 25px;\n  background-color: #2196f3;\n  border: 1px solid #2196f3;\n  outline: #2196f3;\n  width: 60px;\n  height: 45px;\n  padding: 0;\n  cursor: pointer;\n  color: #1769aa;\n  .icon-add {\n    width: 28px;\n    height: 28px;\n    fill: white;\n  }\n  .icon-add:hover,\n  .icon-add:focus {\n    fill: #1769aa;\n  }\n`;\n","import React from 'react';\nimport { FaPenToSquare } from 'react-icons/fa6';\nimport { BtnForm, FormTask, InputForm } from './TaskForm.styled';\nimport { useDispatch } from 'react-redux';\nimport { addTask } from 'redux/tasks/tasksSlice';\n\nexport default function TaskForm() {\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const title = event.target.elements.title.value;\n    if (title !== '') {\n      dispatch(addTask(title));\n      event.target.reset();\n      return;\n    }\n    alert('Task cannot be empty. Enter some text!');\n  };\n  return (\n    <FormTask onSubmit={handleSubmit}>\n      <InputForm type=\"title\" name=\"title\" placeholder=\"Enter task text...\" />\n      <BtnForm type=\"submit\">\n        <FaPenToSquare className=\"icon-add\" />\n      </BtnForm>\n    </FormTask>\n  );\n}\n","import styled from 'styled-components';\n\nexport const WrapList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n  padding: 0;\n  margin: 80px auto;\n  @media screen and (min-width: 380px) {\n    min-width: 360px;\n  }\n  @media screen and (min-width: 440px) {\n    /* min-width: 420px; */\n  }\n  @media screen and (min-width: 500px) {\n    /* width: 480px; */\n  }\n`;\n\nexport const WrapTask = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  /* min-width: 300px; */\n  /* width: 100%; */\n  height: 44px;\n  /* padding: 0;\n  margin: 0 auto; */\n`;\n\nexport const DateTask = styled.p`\n  display: flex;\n  width: 70px;\n  height: 50px;\n  font-size: 16px;\n  font-weight: 500;\n  background-color: aqua;\n  color: black;\n  padding: 0;\n  margin: 0;\n`;\nexport const StatusTask = styled.button`\n  width: 50px;\n  height: 50px;\n`;\n\nexport const TextTask = styled.div`\n  position: relative;\n  overflow: hidden;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  /* width: 100%; */\n  background-color: ${props => props.color};\n  border-radius: 25px;\n  border: 1px solid #2196f3;\n  padding: 0;\n  margin: 0 auto;\n`;\nexport const Text = styled.h4`\n  display: inline-block;\n  width: 248px;\n  font-size: 16px;\n  font-weight: 500;\n  color: #2c387e;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin: 0;\n  padding: 0 0 0 16px;\n  @media screen and (min-width: 380px) {\n    width: 300px;\n  }\n  @media screen and (min-width: 440px) {\n    width: 360px;\n  }\n  @media screen and (min-width: 500px) {\n    width: 404px;\n  }\n`;\n\nexport const BtnSetting = styled.button`\n  position: relative;\n  overflow: hidden;\n  display: inline-block;\n  background-color: #2196f3;\n  border: 1px solid #2196f3;\n  outline: #2196f3;\n  width: 60px;\n  height: 44px;\n  border-top-right-radius: 25px;\n  border-bottom-right-radius: 25px;\n  cursor: pointer;\n  .icon-setting {\n    width: 28px;\n    height: 28px;\n    fill: white;\n  }\n  .icon-setting:hover,\n  .icon-setting:focus {\n    fill: #1769aa;\n  }\n`;\n\nexport const SettingTask = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 4px;\n  background-color: #2196f3;\n  color: white;\n  width: 250px;\n  height: 44px;\n  border-bottom-left-radius: 25px;\n  border-top-left-radius: 25px;\n  border: 1px solid #2196f3;\n  padding: 0;\n  margin: 0;\n  position: absolute;\n  transform: translate(0, 0);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  right: 0;\n`;\n\nexport const BtnStatus = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 40px;\n  height: 40px;\n  border: 2px solid #2196f3;\n  border-radius: 50%;\n  background-color: ${props => props.color};\n  .icon-color {\n    width: 24px;\n    height: 24px;\n    fill: #2196f3;\n  }\n  .icon-color:hover,\n  .icon-color:focus {\n    width: 24px;\n    height: 24px;\n    fill: white;\n  }\n`;\n\nexport const BtnDelete = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: white;\n  border-radius: 50%;\n  border: 2px solid #2196f3;\n  width: 40px;\n  height: 40px;\n  padding: 0;\n  cursor: pointer;\n  .icon-delete {\n    width: 20px;\n    height: 20px;\n    fill: #2196f3;\n  }\n  .icon-delete:hover,\n  .icon-delete:focus {\n    fill: #1769aa;\n  }\n  @media screen and (min-width: 600px) {\n    width: 40px;\n    height: 40px;\n    .icon-delete {\n      width: 24px;\n      height: 24px;\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport {\n  BtnDelete,\n  BtnSetting,\n  BtnStatus,\n  DateTask,\n  SettingTask,\n  StatusTask,\n  Text,\n  TextTask,\n  WrapTask,\n} from './Task.styled';\nimport { BsFillTrash3Fill } from 'react-icons/bs';\nimport { useDispatch } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { deleteTask, changeTaskColor } from 'redux/tasks/tasksSlice';\nimport { BsEmojiWink } from 'react-icons/bs';\nimport { FaCogs } from 'react-icons/fa';\n\nexport default function MyTask({ task }) {\n  const dispatch = useDispatch();\n  const [isMoving, setIsMoving] = useState(false);\n\n  const handleSettingClick = () => {\n    setIsMoving(!isMoving);\n  };\n\n  return (\n    <WrapTask id={nanoid()}>\n      <DateTask>{task.date}</DateTask>\n      <StatusTask>{task.completed}</StatusTask>\n      <TextTask style={{ backgroundColor: task.color }}>\n        <Text>{task.title}</Text>\n        <SettingTask\n          style={{\n            transform: isMoving ? 'translate(0, 0)' : 'translate(80%, 0)',\n          }}\n        >\n          <BtnStatus\n            color=\"#ff5252\"\n            onClick={() =>\n              dispatch(changeTaskColor({ color: '#ff5252', id: task.id }))\n            }\n          >\n            <BsEmojiWink className=\"icon-color\" />\n          </BtnStatus>\n          <BtnStatus\n            color=\"#ffee58\"\n            onClick={() =>\n              dispatch(changeTaskColor({ color: '#ffee58', id: task.id }))\n            }\n          >\n            <BsEmojiWink className=\"icon-color\" />\n          </BtnStatus>\n          <BtnStatus\n            color=\"#00e676\"\n            onClick={() =>\n              dispatch(changeTaskColor({ color: '#00e676', id: task.id }))\n            }\n          >\n            <BsEmojiWink className=\"icon-color\" />\n          </BtnStatus>\n          <BtnDelete onClick={() => dispatch(deleteTask(task.id))}>\n            <BsFillTrash3Fill className=\"icon-delete\" />\n          </BtnDelete>\n        </SettingTask>\n        <BtnSetting onClick={handleSettingClick}>\n          <FaCogs className=\"icon-setting\" />\n        </BtnSetting>\n      </TextTask>\n    </WrapTask>\n  );\n}\n","import React from 'react';\nimport { WrapList } from './Task.styled';\nimport {\n  selectIsLoading,\n  selectError,\n  selectVisibleTasks,\n} from 'redux/selectors';\nimport { useSelector } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport MyTask from './MyTask';\n// import Task from 'components/Task/Task';\n\nexport default function TaskList() {\n  // const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const newTasks = useSelector(selectVisibleTasks);\n\n  console.log(newTasks);\n\n  // useEffect(() => {\n  //   dispatch(fetchTasks());\n  // }, [dispatch]);\n\n  const showArr = Array.isArray(newTasks) && newTasks.length !== 0;\n  return (\n    <>\n      {isLoading && <p>Loading tasks...</p>}\n      {error && <p>{error}</p>}\n      <WrapList>\n        {showArr && newTasks.map(task => <MyTask task={task} key={nanoid()} />)}\n      </WrapList>\n    </>\n  );\n}\n","// import { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectIsLoading } from 'redux/selectors';\n// import { fetchTasks } from 'redux/operations';\nimport TaskForm from 'components/TaskForm/TaskForm';\nimport { WrapTasksPage } from './Page.styled';\nimport TaskList from 'components/Task/TaskList';\n\nexport default function TasksPage() {\n  // const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  // useEffect(() => {\n  //   dispatch(fetchTasks());\n  // }, [dispatch]);\n\n  return (\n    <WrapTasksPage>\n      <div>{isLoading && 'Request in progress...'}</div>\n      <TaskForm />\n      <TaskList />\n    </WrapTasksPage>\n  );\n}\n"],"names":["WrapTasksPage","styled","WrapSignPage","TitleSignPage","FormTask","InputForm","BtnForm","TaskForm","dispatch","useDispatch","onSubmit","event","preventDefault","title","target","elements","value","addTask","reset","alert","type","name","placeholder","className","WrapList","WrapTask","DateTask","StatusTask","TextTask","props","color","Text","BtnSetting","SettingTask","BtnStatus","BtnDelete","MyTask","task","useState","isMoving","setIsMoving","id","nanoid","date","completed","style","backgroundColor","transform","onClick","changeTaskColor","deleteTask","TaskList","isLoading","useSelector","selectIsLoading","error","selectError","newTasks","selectVisibleTasks","console","log","showArr","Array","isArray","length","map","TasksPage"],"sourceRoot":""}